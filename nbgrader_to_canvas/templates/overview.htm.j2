{% extends 'base.htm.j2' %}

{# Scripts for overview page #}
{%- block head -%}

  {# set base_url variable #}
  <script> var base_url = "{{ base_url }}"; </script>

  {# link to css for style#}
  <link rel="stylesheet" href="{{ base_url }}/static/css/main.css"/>

  <style>
  </style>

{%- endblock -%}

{# Title of page #}
{%- block title -%}
Grading Overview
{%- endblock -%}

{# Display sidebar with highlighting for current section #}
{%- block sidebar -%}
<li role="presentation" class="active"><a href="{{ base_url }}/grade_overview">Grading Overview</a></li>
<br>
<li> <label>Show Uploaded Assignments <input type = "checkbox" id="visibility_checkbox" name="visibility_checkbox" style="vertical-align: top;" onclick="visibilityToggle()"></label></li>
<br>
<li> <label>Upload New Feedback <input type = "checkbox" id="feedback_checkbox" name="feedback_checkbox" value="1" style="vertical-align: top;"></label></li>

<li>If checked, feedback from NbGrader will be automatically transfered as a downloadable comment on canvas. <b>This may make larger classes take 15+ minutes to upload grades.</b></li>
<br>
<li> If you accidentally upload to the wrong assignment, use the cancel button to free the dropdown for re-uploading.</li>
<br>
<li><b>Note that any uploaded grades cannot be reverted.</b></li>

{%- endblock -%}

{# Create bar across page #}
{%- block breadcrumbs -%}
<ol class="breadcrumb">
  <li class="active">Overview</li>
</ol>
{%- endblock -%}

{# Block for messages (if needed) #}
{%- block messages -%}

  {# Display the upload progress information #}
  {# {% if False %} #}
  {% if  progress %}
    <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
      <div class="panel panel-default">
        <div class="panel-heading" role="tab" id="headingOne">
          <h4 class="panel-title">
            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
              Upload Status (click to expand)
            </a>
          </h4>
        </div>
        <div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
          <div class="panel-body">
            <ul>
              <li>{{ progress.tag }}</li>
              <li>Created: {{ progress.created_at }}</li>
              <li>Last updated: {{ progress.updated_at }}</li>
              <li>Details: {{ progress.message }}</li>
              <li>Percent completed: {{ progress.completion }}</li>
              <li>Workflow state: {{ progress.workflow_state }}</li>
              <li>Results: {{ progress.results }}</li>
              <li>Progress update url: <a href="{{ progress.url }}" target="_blank">{{ progress.url }}</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  {% endif %}

{%- endblock -%}

{#
  Create the header with nbgrader assignments, assignment relation with
  Canvas, and upload details to Canvas
#}
{%- block table_header -%}
<tr>
  <th class="text-center">Nbgrader Assignment</th>
  <th class="text-center">Canvas Assignment</th>
  <th class="text-center">Late Penalty</th>
  <th class="text-center">Upload Grades to Canvas</th>
</tr>
{%- endblock -%}

{#
  Create rows in the table.
  Each row contains the nbgrader assignment name, options for assignment within
  in Canvas, and a status indicator of the assignment to Canvas
#}
{%- block table_body -%}

  {% for name,match in nb_matches.items() %}
  <tr id="row_{{ name }}">
    {# create a submit form to upload grades for each row #}
    <form action="" method="POST" id="form_{{ name }}"> {# {{ url_for('upload_grades.upload_grades') }} #}

    {# display the nbgrader assignment names #}
    <td class="text-center" style="vertical-align: middle">{{ name }}</td>

    {# create dropdown of canvas assignments #}
    <td class="text-center" style="vertical-align: middle">
    <select name="form_canvas_assign_id" class="canvas_assign" id="select_{{ name }}" disabled=true> 

      {# if a match is found, form match and create dropdown menu of unselectable assignments from Canvas #}
      {% if match and not match.status == 'Failed' %}
          {% if match.canvas_assign_id == 'create' %}
            <option value="{{ match.canvas_assign_id }}" selected="selected">{{ name }}</option>
          {% else %}
            <option value="create">Create Canvas Assignment</option>
            <option value="{{ match.canvas_assign_id }}" selected="selected">{{ cv_assign[match.canvas_assign_id | int] }}</option>
          {% endif %}
          
          {% for id, assignment in cv_assign.items() %}
              {# list the unmatched canvas assignments #}
              {% if not cv_matches[assignment] or cv_matches[assignment].status == 'Failed' and id != match.canvas_assign_id %}
                  <option value="{{ id }}" disabled=True>{{ assignment }}</option>
              {% endif %}
          {% endfor %}

      {# if no match found, default to creating an assignment and list all Canvas assignments #}
      {% else %}
          <option value="create" selected="selected">Create Canvas Assignment</option>
          {% for id, assignment in cv_assign.items() %}
              {# make a match if similar nbgrader assignment exists in Canvas #}
              {% if not cv_matches[assignment] or cv_matches[assignment].status == 'Failed' %}
                {% if assignment == name %}
                    <option value="{{ id }}" selected="selected">{{ assignment }}</option>
                {# list the canvas assignments #}
                {% else %}
                    <option value="{{ id }}">{{ assignment }}</option>
                {% endif %}
              {% endif %}
          {% endfor %}
      {% endif %}
    </select>
    </td>

    {# display the late penalty dropdown. Eventually probably turn this to text field #}
    <td class="text-center" style="vertical-align: middle">
    <select name="late_penalty_{{ name }}" class="late_penalty" id="late_penalty_{{ name }}" disabled=true>
      <option value="0">0%</option>
      <option value="10">10%</option>
      <option value="20">20%</option>
      <option value="25">25%</option>
      <option value="50">50%</option>
    </select>
    </td>

    {# display the upload button, which store the name for each nbgrader assignment  #}
    <td class="text-center" style="vertical-align: middle">
    <input type="submit" class="uploadbtn" name="{{ name }}" value="Upload Grades" id = "submit_{{ name }}" disabled = true/>
    <input type="hidden" name="form_nb_assign_name" value="{{ name }}" />
    
    </form>

    <span class="br"></span>
    {# {% if match %}
        <span class="blackText">Last Updated:</span>&nbsp;<span class="greenText">{{match.last_updated_time}}</span>
    {% else %} #}
        <span class="blackText">Status:</span>&nbsp;<span class="redText" id="{{ name }}">No match found</span>
    {# {% endif %} #}
    
      {# TO DO == Need to implement status bar #}    
      <span class="blackText"></span>
      <div class="text-center">
        <div class="progress center-block" style="width:25%" >
          <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width:0%" id= "status_bar_{{ name }}">
          </div>
        </div>
      </div>
    </td>
    <td class="text-center" style="vertical-align: middle">
      <input type="button" class="cancelbtn" name="{{ name }}" value="Cancel" id="cancel_{{ name }}" disabled=true>
    </td>
  </tr>
  {% endfor %}
{%- endblock -%}


{# Final line under all rows #}
{%- block table_footer -%}
  <tr>
    <td colspan="3"></td>
  </tr>
{%- endblock -%}

{# Javascript to show upload #}
{%- block javascript -%}

    {# loop through the rows, add nb name to array, and use ajax to call url and display #}
    <script> 

      var assignments = new Array();
      var intervalIDs = new Array();
      var counter = 0;

      $("input[type=hidden]").each(function(i, el) {
          assignments.push($(this).val());       
      });

      console.log("assignments");
      console.log(assignments);
      console.log("enter loop");

      while (counter < assignments.length) {
        let current_assignment = assignments[counter]
        let form = document.getElementById('form_'+current_assignment);
        form.addEventListener( 'submit', function(){submitUpload(event,current_assignment)});
        let cancel = document.getElementById('cancel_'+current_assignment);
        cancel.addEventListener( 'click', function(){cancelUpload(current_assignment)});
        let late_dropdown = document.getElementById('late_penalty_'+current_assignment);
        $.ajax({
          type: "POST",
          url: "/get_late_penalty",
          data: {
            course_id: "{{ course_id }}",
            assignment: current_assignment
          },
          success: function(result){
            late_dropdown.value = result
          },
          error: function(result){
            console.log(result);
            if(result.status == 303) {
              window.location.href = result.responseText
            }
            errorMessage("Error occured while getting late penalty for "+current_assignment+".");
          }
        });
        intervalIDs.push(window.setInterval(updateStatus, 1000, current_assignment, counter, true));
        counter++;
      }

      // Begins the upload process for a given assignment and adds assignment
      // to background process that updates assignment row during upload
      function submitUpload(event, current_assignment){
        event.preventDefault();
        canvas_id = document.getElementById('select_'+current_assignment).value
        late_penalty = document.getElementById('late_penalty_'+current_assignment).value
        feedback_checkbox = document.getElementById('feedback_checkbox').checked
        $.ajax({
          type: "POST",
          url: "/upload_grades",
          data: {
            course_id: "{{ course_id }}",
            group: "{{ group }}",
            form_canvas_assign_id: canvas_id,
            form_nb_assign_name:current_assignment,
            late_penalty:late_penalty,
            feedback_checkbox:feedback_checkbox
          },
          success: function(result){
            console.log(result);
          },
          error: function(xmlhttprequest, textstatus, message){
            if (textstatus === "timeout")return;
            if(xmlhttprequest.status == 303) {
              window.location.href = result.responseText
            }else if (xmlhttprequest.status == 500){
              window.location.href = 'open'
            }
          }
        });
        
        document.getElementById('select_'+current_assignment).disabled = true;
        document.getElementById('submit_'+current_assignment).disabled = true;
        document.getElementById('cancel_'+current_assignment).disabled = true;
        document.getElementById('late_penalty_'+current_assignment).disabled = true;
        removeAssignmentFromDropdowns(current_assignment);
        status_label = document.getElementById(current_assignment);
        intervalIDs.push(window.setInterval(updateStatus, 1000, current_assignment, counter, false));
        counter++;
        status_label.innerHTML = "Queued"
        status_label.className = "redText"
      }

      // Signals to remove status and match in db.
      // Does not remove grades uploaded to canvas.
      function cancelUpload(current_assignment) {
        canvas_id = document.getElementById('select_'+current_assignment).value
        console.log('test');
        $.ajax({
          type: "POST",
          url: "/remove_upload",
          data: {
            course_id: "{{ course_id }}",
            group: "{{ group }}",
            form_canvas_assign_id: canvas_id,
            form_nb_assign_name: current_assignment
          },
          success: function(result){
            console.log(result);
            document.getElementById('select_'+current_assignment).disabled = true;
            document.getElementById('submit_'+current_assignment).disabled = true;
            document.getElementById('cancel_'+current_assignment).disabled = true;
            document.getElementById('late_penalty_'+current_assignment).disabled = true;
            enableCanvasDropdown(current_assignment);
            intervalIDs.push(window.setInterval(updateStatus, 1000, current_assignment, counter, true));
            counter++;
          },
          error: function(result){
            console.log(result);
            if(result.status == 303) {
              window.location.href = result.responseText
            }
            //errorMessage("Error occured while removing upload for "+current_assignment+".");
          }
        });
        
      }

      function updateStatus(current_assignment, counter, removeNull){
        console.log("test")
        $.getJSON(
          "{{url_for('get_progress.get_progress') }}",
          { assignment: current_assignment,
            course_id: "{{ course_id }}" },
          function(data){
            console.log(current_assignment+" : "+data)
            if (data == null) {
              if (removeNull) {
                window.clearInterval(intervalIDs[counter]);
                document.getElementById('select_'+current_assignment).disabled = false;
                document.getElementById('submit_'+current_assignment).disabled = false;
                document.getElementById('late_penalty_'+current_assignment).disabled = false;
                document.getElementById(current_assignment).innerHTML = 'No match found';
                document.getElementById(current_assignment).className = 'redText';
                document.getElementById('status_bar_' + current_assignment).style = "width:0%"
                return;
              }
            }else if (!data.status) {
              window.clearInterval(intervalIDs[counter]);
              document.getElementById('select_'+current_assignment).disabled = false;
              document.getElementById('submit_'+current_assignment).disabled = false;
              document.getElementById('late_penalty_'+current_assignment).disabled = false;
              document.getElementById(current_assignment).innerHTML = 'Failed';
              document.getElementById(current_assignment).className = 'redText';
              document.getElementById('status_bar_' + current_assignment).style = "width:0%"
              return;
            } else {
              console.log('data.status: ' + data.status);
              console.log('data.completion: ' + data.completion);
              console.log(current_assignment);

              $('#' + current_assignment + '_status').text(data.status);
              var status_label = document.getElementById(current_assignment)
              var status_bar = document.getElementById('status_bar_' + current_assignment)
              status_bar.style = "width:"+data.completion+"%"
              status_label.innerHTML = data.status;

              if (data.status == 'Initializing') {
                status_label.className = "redText";
              } else if (data.status == 'Fetching Students') {
                status_label.className = "orangeText";
              } else if (data.status == 'Fetching Grades') {
                status_label.className = "orangeText";
              } else if (data.statu == 'Removing Old Feedback') {
                status_label.className = "orangeText";
              } else if (data.statu == 'Fetching Feedback') {
                status_label.className = "orangeText";
              } else if (data.status == 'Uploading Grades') {
                status_label.className = "orangeText";
              } else if (data.status == 'Uploaded') {
                status_label.className = "greenText";
                document.getElementById('select_'+current_assignment).disabled = false;
                document.getElementById('submit_'+current_assignment).disabled = false;
                document.getElementById('cancel_'+current_assignment).disabled = false;
                document.getElementById('late_penalty_'+current_assignment).disabled = false;
                updateCanvasDropdown(current_assignment, data.canvas_assign_id)
                window.clearInterval(intervalIDs[counter]);
                if (removeNull) {
                  document.getElementById('row_'+current_assignment).hidden = true;
                }
                return;
              } else if (data.status == 'Failed') {
                status_label.className = "redText";
                document.getElementById('select_'+current_assignment).disabled = false;
                document.getElementById('submit_'+current_assignment).disabled = false;
                document.getElementById('late_penalty_'+current_assignment).disabled = false;
                window.clearInterval(intervalIDs[counter]);
                return;
              }
            }
          }
        )
        .fail(function(data) {
          console.log(data);
          if(data.status && data.status == 303) {
            window.location.href = data.responseText
          }
          //errorMessage("Error uploading "+current_assignment+".");
          //for (let id of intervalIDs) {
          //  window.clearInterval(id);
          //}
          //return;
        });
      }

      // disable unselected options and if canvas create is selected, then change 
      // it to be the new assignment for potential re-uploads
      function updateCanvasDropdown(current_assignment, canvas_assign_id) {
        selector = document.getElementById('select_'+current_assignment);
        for(let option of selector.options) {
          if(!option.selected) {
            option.disabled = true;
          }
        }
        if (selector.value == 'create') {
          selector.options[selector.selectedIndex].disabled = true;
           selector.options[selector.selectedIndex].innerHTML = "Create Canvas Assignment";
          selector.options[selector.selectedIndex].selected = false;
          var opt = document.createElement('option');
          opt.text = current_assignment;
          opt.value = canvas_assign_id;
          opt.selected = 'selected';
          selector.append(opt);
        }
      }

      // enables unselected options in dropdown
      // adds selected back to other dropdowns
      function enableCanvasDropdown(current_assignment) {
        selector = document.getElementById('select_'+current_assignment);
        for(let option of selector.options) {
          option.disabled = false;
        }
        selectors = document.getElementsByTagName("select")
        for(let sel of selectors) {
          if (sel != selector && sel.id.substring(0,7)=="select_") {
            var opt = document.createElement('option');
            opt.value = selector.options[selector.selectedIndex].value;
            opt.text = selector.options[selector.selectedIndex].text;
            if (document.getElementById(sel.id.substring(7)).innerHTML == 'Uploaded') opt.disabled=true;
            sel.append(opt);
          }
        }
      }

      // when uploading assignment, remove it from other lists to prevent double uploads
      function removeAssignmentFromDropdowns(current_assignment) {
        selector = document.getElementById('select_'+current_assignment);
        assignment = selector.options[selector.selectedIndex].text;
        if (assignment == 'Create Canvas Assignment') return;
        selectors = document.getElementsByTagName("select")
        for(let sel of selectors) {
          if (sel != selector) {
            for(let i = 0; i < sel.options.length; i++) {
              if (sel.options[i].text == assignment) {
                sel.remove(i);
                break;
              }
            }
          }
        }
      }

      // called when visibility checkbox is clicked
      function visibilityToggle(){
        let checkbox = document.getElementById('visibility_checkbox');
        
        if (checkbox.checked) showUploaded();
        else hideUploaded();
      }

      // makes all uploaded assignments visible
      function showUploaded(){
      console.log('show');
        for (let assignment of assignments){
          document.getElementById('row_'+assignment).hidden=false;
        }
      }

      // hides all uploaded assignments
      function hideUploaded(){
      console.log('hide');
      for (let assignment of assignments){
          if (document.getElementById(assignment).innerHTML === "Uploaded")document.getElementById('row_'+assignment).hidden=true;
        }
      }


      // Page to display if upload fails
      function errorMessage(msg){
        document.getElementsByTagName("body")[0].innerHTML = "" +
        "<style> \n" + 
        "  p { \n" +
        "      text-align: center; \n" +
        "      width: 50%; \n" +
        "      margin: auto; \n" +
        "  } \n" +
        "  h1 { \n" +
        "      text-align: center; \n" +
        "      font: bold serif; \n" +
        "  } \n" +
        "</style> \n" +
        "<header> \n" +
        "    <h1>Error</h1><br> \n" +
        "</header> \n" +
        "<div> \n" +
        "    <p>"+msg+"</p><br> \n" +
        "    <p>For assistance with this issue please email <a href='mailto:canvas@ucsd.edu'>canvas@ucsd.edu</a></p> \n" +
        "</div>";
      }

    </script>

{%- endblock -%}
