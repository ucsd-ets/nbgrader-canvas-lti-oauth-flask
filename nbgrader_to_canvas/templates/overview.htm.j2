{% extends 'base.htm.j2' %}

{# Scripts for overview page #}
{%- block head -%}

  {# set base_url variable #}
  <script> var base_url = "{{ base_url }}"; </script>

  {# link to css for style#}
  <link rel="stylesheet" href="{{ base_url }}/static/css/main.css"/>

  <style>
  </style>

{%- endblock -%}

{# Title of page #}
{%- block title -%}
Grading Overview
{%- endblock -%}

{# Display sidebar with highlighting for current section #}
{%- block sidebar -%}
<li role="presentation" class="active"><a href="{{ base_url }}/grade_overview">Grading Overview</a></li>
<li role="presentation"><a href="{{ base_url }}/grade_students">Grade Students {TODO}</a></li>
{%- endblock -%}

{# Create bar across page #}
{%- block breadcrumbs -%}
<ol class="breadcrumb">
  <li class="active">Overview</li>
</ol>
{%- endblock -%}

{# Block for messages (if needed) #}
{%- block messages -%}

  {# Display the upload progress information #}
  {# {% if False %} #}
  {% if  progress %}
    <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
      <div class="panel panel-default">
        <div class="panel-heading" role="tab" id="headingOne">
          <h4 class="panel-title">
            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
              Upload Status (click to expand)
            </a>
          </h4>
        </div>
        <div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
          <div class="panel-body">
            <ul>
              <li>{{ progress.tag }}</li>
              <li>Created: {{ progress.created_at }}</li>
              <li>Last updated: {{ progress.updated_at }}</li>
              <li>Details: {{ progress.message }}</li>
              <li>Percent completed: {{ progress.completion }}</li>
              <li>Workflow state: {{ progress.workflow_state }}</li>
              <li>Results: {{ progress.results }}</li>
              <li>Progress update url: <a href="{{ progress.url }}" target="_blank">{{ progress.url }}</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  {% endif %}

{%- endblock -%}

{#
  Create the header with nbgrader assignments, assignment relation with
  Canvas, and upload details to Canvas
#}
{%- block table_header -%}
<tr>
  <th class="text-center">Nbgrader Assignment</th>
  <th class="text-center">Canvas Assignment</th>
  <th class="text-center">Upload Grades to Canvas</th>
</tr>
{%- endblock -%}

{#
  Create rows in the table.
  Each row contains the nbgrader assignment name, options for assignment within
  in Canvas, and a status indicator of the assignment to Canvas
#}
{%- block table_body -%}

  {% for name,match in db_matches.items() %}
  <tr>
    {# create a submit form to upload grades for each row #}
    <form action="" method="POST" id="form_{{ name }}"> {# {{ url_for('upload_grades.upload_grades') }} #}

    {# display the nbgrader assignment names #}
    <td class="text-center" style="vertical-align: middle">{{ name }}</td>

    {# create dropdown of canvas assignments #}
    <td class="text-center" style="vertical-align: middle">
    <select name="form_canvas_assign_id" class="canvas_assign" id="select_{{ name }}"> 

      {# if a match is found, form match and create dropdown menu of unselectable assignments from Canvas #}
      {% if match %}

          <option value="{{ match.canvas_assign_id }}" selected="selected">{{ cv_assign[match.canvas_assign_id] }}</option>
          {% for id, assignment in cv_assign.items() %}
              {# list the unmatched canvas assignments #}
              {% if assignment != cv_assign[match.canvas_assign_id] %}
                  <option value="{{ id }}" disabled=True>{{ assignment }}</option>
              {% endif %}
          {% endfor %}

      {# if no match found, default to creating an assignment and list all Canvas assignments #}
      {% else %}
          <option value="create" selected="selected">Create Canvas Assignment</option>
          {% for id, assignment in cv_assign.items() %}
              {# make a match if similar nbgrader assignment exists in Canvas #}
              {% if assignment == name %}
                  <option value="{{ id }}" selected="selected">{{ assignment }}</option>
              {# list the canvas assignments #}
              {% else %}
                  <option value="{{ id }}">{{ assignment }}</option>
              {% endif %}
          {% endfor %}
      {% endif %}
    </select>
    </td>

    {# display the upload button, which store the name for each nbgrader assignment  #}
    <td class="text-center" style="vertical-align: middle">
    <input type="submit" class="uploadbtn" name="{{ name }}" value="Upload Grades" id = "submit_{{ name }}"/>
    <input type="hidden" name="form_nb_assign_name" value="{{ name }}" />
    
    </form>

    <span class="br"></span>
    {# {% if match %}
        <span class="blackText">Last Updated:</span>&nbsp;<span class="greenText">{{match.last_updated_time}}</span>
    {% else %} #}
        <span class="blackText">Status:</span>&nbsp;<span class="redText" id="{{ name }}">No match found</span>
    {# {% endif %} #}
    
      {# TO DO == Need to implement status bar #}    
      <span class="blackText"></span>
      <div class="text-center">
        <div class="progress center-block" style="width:25%" >
          <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width:0%" id= "status_bar_{{ name }}">
          </div>
        </div>
      </div>
    </td>
  </tr>
  {% endfor %}
{%- endblock -%}


{# Final line under all rows #}
{%- block table_footer -%}
  <tr>
    <td colspan="3"></td>
  </tr>
{%- endblock -%}

{# Javascript to show upload #}
{%- block javascript -%}

    {# loop through the rows, add nb name to array, and use ajax to call url and display #}
    <script> 

      var assignments = new Array();
      var intervalIDs = new Array();
      var counter = 0;

      $("input[type=hidden]").each(function(i, el) {
          assignments.push($(this).val());       
      });

      console.log("assignments");
      console.log(assignments);
      console.log("enter loop");

      while (counter < assignments.length) {
        let current_assignment = assignments[counter]
        form = document.getElementById('form_'+current_assignment);
        form.addEventListener( 'submit', function(event) {
          event.preventDefault();
          $.getJSON(
            "{{url_for('reset_progress') }}",
            { assignment: current_assignment,
              course_id: {{ course_id}} },
            function(data){}
          );
          
          canvas_id = document.getElementById('select_'+current_assignment).value
          $.ajax({
            type: "POST",
            url: "/upload_grades",
            data: {
              course_id: {{ course_id }},
              group: {{ group }},
              form_canvas_assign_id: canvas_id,
              form_nb_assign_name:current_assignment
            },
            success: function(result){
              console.log(result);
            },
            error: function(result){
              console.log(result);
            }
          });
          intervalIDs.push(window.setInterval(updateStatus, 500, current_assignment, counter, false));
          counter++;
          document.getElementById('submit_'+current_assignment).disabled = true;
          document.getElementById(current_assignment).innerHTML = "Queued";
        });
        intervalIDs.push(window.setInterval(updateStatus, 1000, current_assignment, counter, true));
        counter++;
      }

      function updateStatus(current_assignment, counter, removeNull, statusBar){
        $.getJSON(
          "{{url_for('get_progress') }}",
          { assignment: current_assignment,
            course_id: {{ course_id}} },
          function(data){
            if (data == null) {
              if (removeNull) {
                console.log("Nothing to update");
                window.clearInterval(intervalIDs[counter]);
                return;
              }
            } else{
              console.log('data.status: ' + data.status);
              console.log('data.completion: ' + data.completion);
              console.log(current_assignment);

              $('#' + current_assignment + '_status').text(data.status);
              var change_value = document.getElementById(current_assignment)
              var status_bar = document.getElementById('status_bar_' + current_assignment)
              status_bar.style = "width:"+data.completion+"%"
              change_value.innerHTML = data.status;
              document.getElementById('submit_'+current_assignment).disabled = true;

              if (data.status == 'Initializing'){
                change_value.className = "redText";
              } else if (data.status == 'Fetching Students'){
                change_value.className = "orangeText";
              } else if (data.status == 'Fetching Grades'){
                change_value.className = "orangeText";
              } else if (data.status == 'Uploading Grades') {
                change_value.className = "yellowText";
              } else if (data.status == 'Uploaded') {
                change_value.className = "greenText";
                document.getElementById('submit_'+current_assignment).disabled = false;
                window.clearInterval(intervalIDs[counter]);
                return;
              }
            }
          }
        );
      }

    </script>

{%- endblock -%}